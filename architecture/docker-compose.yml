# This is purely a development setup. DO NOT RUN THIS IN PRODUCTION
version: '3.8'

services:
  # NOTE: You will need to up the max map count on your system
  #       sudo sysctl -w vm.max_map_count=262144
  prepare-all:
    container_name: pre-launch  
    build:
      context: .
      dockerfile: DockerFilePrepareAll

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    ulimits:
      memlock:
        soft: -1
        hard: -1  
    user: "1000:1000"    
    volumes:
      - ./esdata:/var/lib/elasticsearch/data
    environment:
      discovery.type: "single-node"
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
      xpack.monitoring.enabled: "true"
      bootstrap.memory_lock: "true" 
    ports:
      - "9200:9200"
      - "9300:9300"
    depends_on:
      - prepare-all
    networks:
      - docker-elk

  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    user: "1000:1000"
    environment:
      - "ELASTICSEARCH_URL=http://elasticsearch:9200"
    ports:
      - "5601:5601"
    networks:
      - docker-elk
    depends_on:
      - elasticsearch
      - prepare-all

  redis:
    image: redis:5.0-alpine
    container_name: redis
    user: "1000:1000"
    ports:
      - "6379:6379"
    volumes:
      - ./redis:/data
    depends_on:
      - prepare-all  
    networks:
      - docker-elk

  postgres:
    container_name: postgres
    image: postgres:15.1
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: postgres-data
      POSTGRES_MULTIPLE_DATABASES: cocus,rhadmin
    volumes:
       - postgres-data:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - docker-elk

  mysql:
    image: mysql:5.7.40
    container_name: mysql
    user: "1000:1000"
    ports:
      - "3306:3306"
    environment:
      - MYSQL_DATABASE=keycloak
      - MYSQL_USER=keycloak
      - MYSQL_PASSWORD=password
      - MYSQL_ROOT_PASSWORD=root_password
    healthcheck:
      test: "mysqladmin ping -u root -p$${MYSQL_ROOT_PASSWORD}"
    depends_on:
      - prepare-all  
    networks:
      - docker-elk

  keycloak:
    image: quay.io/keycloak/keycloak:20.0.0
    restart: unless-stopped
    user: "1000:1000"
    container_name: keycloak
    stdin_open: true
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=mysql
      - KC_DB_URL_HOST=mysql
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=password
    ports:
      - "8080:8080"
    command: start-dev
    depends_on:
      - prepare-all
      - mysql
    healthcheck:
      test: "curl -f http://localhost:8080/admin || exit 1"
    networks:
      - docker-elk

  localstack:
    container_name: "localstack_main"
    image: localstack/localstack
    ports:
      - "4566-4583:4566-4583"
    environment:
      - SERVICES=s3
      - AWS_DEFAULT_REGION=us-east-1
      - EDGE_PORT=4566
      - DEBUG=1
    volumes:
      - "./localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - docker-elk

volumes:
  postgres-data:

networks:
  docker-elk:
    driver: bridge